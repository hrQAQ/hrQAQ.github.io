{"title":"「系统编程」文件操作","date":"2022-10-04T20:10:06.000Z","date_formatted":{"ll":"Oct 4, 2022","L":"10/04/2022","MM-DD":"10-04"},"thumbnail":"https://images.unsplash.com/photo-1519052537078-e6302a4968d4?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80","link":"2022/10/04/「系统编程」文件操作","comments":true,"tags":["Linux基础","系统调用"],"categories":["系统编程"],"updated":"2022-10-05T22:14:40.976Z","content":"<blockquote>\n<p>又在写完后才找到API文档…<br>\n本文涉及的 api 可以参考 <a href=\"https://wizardforcel.gitbooks.io/linux-c-api-ref/content/\" target=\"_blank\">Linux C API参考手册</a></p>\n</blockquote>\n<hr>\n<h2 id=\"文件的类型\">文件的类型<a title=\"#文件的类型\" href=\"#文件的类型\"></a></h2>\n<p><a href=\"https://haicoder.net/linux/linux-filetype.html\" target=\"_blank\">Linux七种文件类型详解</a></p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>文件属性</th>\n<th>文件类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>常规文件，即 file</td>\n</tr>\n<tr>\n<td>d</td>\n<td>目录文件</td>\n</tr>\n<tr>\n<td>b</td>\n<td>block device 即块设备文件，如硬盘;支持以 block 为单位进行随机访问</td>\n</tr>\n<tr>\n<td>c</td>\n<td>character device 即字符设备文件，如键盘支持以 character 为单位进行线性访问</td>\n</tr>\n<tr>\n<td>l</td>\n<td>symbolic link 即符号链接文件，又称软链接文件</td>\n</tr>\n<tr>\n<td>p</td>\n<td>pipe 即命名管道文件</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket 即套接字文件，用于实现两个进程进行通信</td>\n</tr>\n</tbody>\n</table></div></div><h2 id=\"文件的权限\">文件的权限<a title=\"#文件的权限\" href=\"#文件的权限\"></a></h2>\n<p>umask指定了在建立文件时预设的权限掩码。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umask</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt; 0022</span></span><br><span class=\"line\"></span><br><span class=\"line\">umask -S</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt; u=rwx,g=rx,o=rx</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文件读写操作syscall\">文件读写操作Syscall<a title=\"#文件读写操作syscall\" href=\"#文件读写操作syscall\"></a></h2>\n<p>一个比较详细的介绍在<a href=\"https://www.cnblogs.com/tongye/p/9830006.html\" target=\"_blank\">这里</a>，本文只记录API</p>\n<ul>\n<li>\n<p>打开 open</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para pathname：要创建的文件名（包括路径信息）</span></span><br><span class=\"line\"><span class=\"comment\">* @para\tflags：打开的模式</span></span><br><span class=\"line\"><span class=\"comment\">* @return 成功返回文件描述符 否则返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">open</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span>* pathname, <span class=\"type\">int</span> flags, ...)</span>;</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>Mode</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>O_RDONLY</td>\n<td>只读</td>\n</tr>\n<tr>\n<td>O_WRONLY</td>\n<td>只写</td>\n</tr>\n<tr>\n<td>O_RDWR</td>\n<td>读写</td>\n</tr>\n<tr>\n<td>O_NONBLOCK</td>\n<td>非阻塞I/O，如果read(2)调用没有可读取的数据，或者如果write(2)操作将阻塞，则read或write调用将返回-1和EAGAIN错误</td>\n</tr>\n<tr>\n<td>O_APPEND</td>\n<td>每次写的数据都添加到文件尾</td>\n</tr>\n<tr>\n<td>O_TRUNC</td>\n<td>若此文件存在，并以读写或只写打开，则文件长度为0</td>\n</tr>\n<tr>\n<td>O_CREAT</td>\n<td>若文件不存在，则创建该文件。此时，open 函数需要第三个参数，用于指定该文件的访问权限位</td>\n</tr>\n<tr>\n<td>O_EXCL</td>\n<td>若同时指定了O_CREAT标志，而文件已经存在，则会出错。可用于测试文件是否存在</td>\n</tr>\n<tr>\n<td>O_DIRECT</td>\n<td>最小化或去掉reading和writing的缓存影响。系统将企图避免缓存你的读或写的数 据。如果不能够避免缓存，那么它将最小化已经被缓存了的数据造成的影响。如果<br>这个标志用的不够好，将大大的降低性能</td>\n</tr>\n<tr>\n<td>O_ASYNC</td>\n<td>当I/O可用的时候，允许SIGIO信号发送到进程组，例如：当有数据可以读的时候</td>\n</tr>\n</tbody>\n</table></div></div></li>\n<li>\n<p>创建 creat</p>\n<p>注意：当文件存在时，调用creat函数，会将文件的大小变为0</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para pathname：要创建的文件名（包括路径信息）</span></span><br><span class=\"line\"><span class=\"comment\">* @para\tmode：同open的第三个参数，讨论文件的访问权限位</span></span><br><span class=\"line\"><span class=\"comment\">* @return 成功返回只写打开的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t  出错返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">creat</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *pathname, <span class=\"type\">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure>\n<p>替换creat的方式</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">open</span><span class=\"params\">(pathname, O_RDWR | O_CREAT | O_TRUNC,mode)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>定位 lseek</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para filedes: open/creat函数返回的文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">* @para offset: 相对偏移量,需结合whence才能计算出真正的偏移量</span></span><br><span class=\"line\"><span class=\"comment\">* @para: Whence: 从何处开始计算偏移量</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t   \t SEEK_SET \t文件开始处\\</span></span><br><span class=\"line\"><span class=\"comment\">* \t\t\t\t SEEK_CUR \t文件当前偏移量\\</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t\t SEEK_END\t文件尾部\\</span></span><br><span class=\"line\"><span class=\"comment\">* @return: 类型off_t：通常情况下是32位数据类型 \\</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t若成功，返回新的文件偏移量 </span></span><br><span class=\"line\"><span class=\"comment\">*\t\t\t若出错，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">off_t</span> <span class=\"title function_\">lseek</span><span class=\"params\">(<span class=\"type\">int</span> filedes, <span class=\"type\">off_t</span> offset, <span class=\"type\">int</span> whence)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>读 read</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para fd: 文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">* @para buff: 指向缓冲区，用于存放从文件读出的数据</span></span><br><span class=\"line\"><span class=\"comment\">* @para nbytes: 需要从文件中读出的字节数</span></span><br><span class=\"line\"><span class=\"comment\">* @constraint: 缓冲区的大小&gt;=nbytes</span></span><br><span class=\"line\"><span class=\"comment\">* @return: 成功，返回从文件中实际读到的字节数 当读到文件结尾时，则返回0</span></span><br><span class=\"line\"><span class=\"comment\">*          出错，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">size_t</span> <span class=\"title function_\">read</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">void</span> *buff, <span class=\"type\">size_t</span> nbytes)</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>写 write</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para fd: 文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">* @para buff: 指向缓冲区，存放了需要写入文件的数据</span></span><br><span class=\"line\"><span class=\"comment\">* @para nbytes: 需要写入文件的字节数</span></span><br><span class=\"line\"><span class=\"comment\">* @return: 成功，返回实际写入文件的字节数</span></span><br><span class=\"line\"><span class=\"comment\">*          出错，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">size_t</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> fd, <span class=\"type\">const</span> <span class=\"type\">void</span> *buff, <span class=\"type\">size_t</span> nbytes)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>关闭 close</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para fd: 文件描述符</span></span><br><span class=\"line\"><span class=\"comment\">* @return: 成功，返回0</span></span><br><span class=\"line\"><span class=\"comment\">*          出错，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">close</span><span class=\"params\">(<span class=\"type\">int</span> filedes)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>删除 unlink</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @para path: 要删除文件的路径</span></span><br><span class=\"line\"><span class=\"comment\">* @return: 成功，返回0</span></span><br><span class=\"line\"><span class=\"comment\">*          出错，返回-1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">unlink</span><span class=\"params\">(<span class=\"type\">char</span>* path)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"文件描述符的属性控制\">文件描述符的属性控制<a title=\"#文件描述符的属性控制\" href=\"#文件描述符的属性控制\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> result=fcntl(<span class=\"type\">int</span> fd,<span class=\"type\">int</span> cmd);</span><br><span class=\"line\"><span class=\"type\">int</span> result=fcntl(<span class=\"type\">int</span> fd,<span class=\"type\">int</span> cmd,<span class=\"type\">long</span> arg,...);</span><br></pre></td></tr></table></figure>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th style=\"text-align:left\">cmd</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">F_DUPFD</td>\n<td style=\"text-align:left\">复制文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_GETFD</td>\n<td style=\"text-align:left\">获得文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_SETFD</td>\n<td style=\"text-align:left\">设置文件描述符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_GETFL</td>\n<td style=\"text-align:left\">获取文件描述符当前模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_SETFL</td>\n<td style=\"text-align:left\">设置文件描述符当前模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_GETOWN</td>\n<td style=\"text-align:left\">获得异步I/O所有权</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_SETOWN</td>\n<td style=\"text-align:left\">设置异步I/O所有权</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_GETLK</td>\n<td style=\"text-align:left\">获得记录锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_SETLK</td>\n<td style=\"text-align:left\">设置记录锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">F_SETLKW</td>\n<td style=\"text-align:left\">设置记录锁</td>\n</tr>\n</tbody>\n</table></div></div><p><strong>常见用法</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增加文件的某个flags，比如文件是阻塞的，想设置成非阻塞:</span></span><br><span class=\"line\">flags = fcntl(fd,F_GETFL,<span class=\"number\">0</span>); \t<span class=\"comment\">//首先获取文件描述符属性</span></span><br><span class=\"line\">flags |= O_NONBLOCK; \t\t\t<span class=\"comment\">//修改文件描述符属性，设置为非阻塞模式</span></span><br><span class=\"line\">fcntl(fd,F_SETFL,flags);\t\t<span class=\"comment\">//设置文件描述符属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//取消文件的某个flags，比如文件是追加模式的， 想设置成为非追加模式:</span></span><br><span class=\"line\">flags = fcntl(fd,F_GETFL,<span class=\"number\">0</span>);</span><br><span class=\"line\">flags &amp;= ~O_APPEND; <span class=\"comment\">//对追加模式取非表示取消追加模式。</span></span><br><span class=\"line\">fcntl(fd,F_SETFL,flags);</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件\\目录相关syscall\">文件\\目录相关Syscall<a title=\"#文件\\目录相关syscall\" href=\"#文件\\目录相关syscall\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;dirent.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 打开目录，返回一个指向DIR的指针，从而创建一个到目录的连接</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">DIR *<span class=\"title function_\">opendir</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *dir_name)</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 每次从DIR中读取目录项信息，该目录信息保存在结构体dirent中 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dirent</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> d_name[<span class=\"number\">1</span>];\t<span class=\"comment\">/* 文件名称 */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> d_fileno; \t<span class=\"comment\">/*文件的inode号*/</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> dirent * <span class=\"title function_\">readdir</span><span class=\"params\">(DIR *dir)</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 目录的定位</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">seekdir</span><span class=\"params\">(DIR *dir, <span class=\"type\">off_t</span> offset)</span>;</span><br><span class=\"line\"><span class=\"type\">off_t</span> <span class=\"title function_\">telldir</span><span class=\"params\">(DIR *dir)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">rewinddir</span><span class=\"params\">(DIR *dir)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 目录的创建/删除/改变/获得</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> res=mkdir(<span class=\"type\">char</span>*pathname,<span class=\"type\">mode_t</span> mode);</span><br><span class=\"line\"><span class=\"type\">int</span> res=rmdir(<span class=\"type\">char</span>*pathname);</span><br><span class=\"line\"><span class=\"type\">int</span> res=chdir(<span class=\"type\">const</span> <span class=\"type\">char</span>* path);</span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">getcwd</span><span class=\"params\">(<span class=\"type\">char</span> *buf, <span class=\"type\">size_t</span> size)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 目录或者文件重命名,同时可以改变位置</span></span><br><span class=\"line\"><span class=\"comment\">* 本质只是将链接移动到另外一个目录</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> res=rename(<span class=\"type\">const</span> <span class=\"type\">char</span>*from,<span class=\"type\">const</span> <span class=\"type\">char</span> *to);</span><br><span class=\"line\"><span class=\"comment\">// eg</span></span><br><span class=\"line\">rename(<span class=\"string\">&quot;y&quot;</span>,<span class=\"string\">&quot;c/d2/y.old&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 文件与目录的属性</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"type\">int</span> result=stat(<span class=\"type\">char</span> *fname,<span class=\"keyword\">struct</span> stat *bufp);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lstat</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"keyword\">restrict</span> path, <span class=\"keyword\">struct</span> stat *<span class=\"keyword\">restrict</span> buf)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">fstat</span><span class=\"params\">(<span class=\"type\">int</span> fildes, <span class=\"keyword\">struct</span> stat *buf)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> &#123;</span> </span><br><span class=\"line\">    <span class=\"type\">dev_t</span> st_dev;\t<span class=\"comment\">/*包含该文件的设备ID号*/</span> </span><br><span class=\"line\">    <span class=\"type\">ino_t</span> st_ino;\t<span class=\"comment\">/*文件的inode file serial number*/</span></span><br><span class=\"line\">\t<span class=\"type\">mode_t</span> st_mode;\t\t<span class=\"comment\">/*文件类型及权限模式*/</span> </span><br><span class=\"line\">    <span class=\"type\">nlink_t</span> st_nlink;\t<span class=\"comment\">/*该文件的链接数*/</span></span><br><span class=\"line\">\t<span class=\"type\">uid_t</span> st_uid;\t<span class=\"comment\">/*文件所有者的用户ID*/</span></span><br><span class=\"line\">\t<span class=\"type\">gid_t</span> st_uid;\t<span class=\"comment\">/*文件的组ID*/</span></span><br><span class=\"line\">\t<span class=\"type\">dev_t</span> st_rdev;\t<span class=\"comment\">/*如果文件为字符或者块设备时的设备ID*/</span> </span><br><span class=\"line\">    <span class=\"type\">off_t</span> st_size;\t<span class=\"comment\">/*若文件为普通文件，文件的字节数*/</span></span><br><span class=\"line\">\t<span class=\"type\">time_t</span> st_atime; <span class=\"comment\">/*最近的访问时间*/</span> </span><br><span class=\"line\">    <span class=\"type\">time_t</span> st_mtime; <span class=\"comment\">/*最近数据修改时间*/</span> </span><br><span class=\"line\">    <span class=\"type\">time_t</span> st_ctime; <span class=\"comment\">/*最近文件状态改变的时间*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"链接\">链接<a title=\"#链接\" href=\"#链接\"></a></h2>\n<p>目录文件中存储的是文件名称及所对应的 inode，它被称为链接。不同的文件名可以对应同一个inode，链接数是指向该inode的文件数。</p>\n<p>链接分为硬链接和符号链接，<a href=\"https://www.jianshu.com/p/dde6a01c4094\" target=\"_blank\">这篇文</a>有具体介绍它们的区别。评论区有一句话总结的挺好：文件名本身是指针，硬链接是和文件名同一级别的指针，软链接(符号链接)是指向指针的指针。</p>\n<p>下面是使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">硬链接</span></span><br><span class=\"line\">ln testfile hard_link</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">软连接(符号链接)</span></span><br><span class=\"line\">ln -s testfile softlink</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件io和标准io的区别\">文件IO和标准IO的区别<a title=\"#文件io和标准io的区别\" href=\"#文件io和标准io的区别\"></a></h2>\n<p><a href=\"https://www.cnblogs.com/vamei/archive/2012/09/19/2692452.html?spm=a2c6h.12873639.article-detail.5.d1c47d42vlNjAr\" target=\"_blank\">详见此文</a></p>\n<ol>\n<li>\n<p>文件I/O 又称为低级磁盘I/O，遵循POSIX相关标准。任何兼容POSIX标准的操作系统上都支持文件I/O。</p>\n<ul>\n<li>\n<p>通过<strong>文件I/O</strong>读写文件时，每次操作都会执行相关系统调用。这样处理的好处是直接读写实际文件，坏处是频繁的系统调用会增加系统开销</p>\n</li>\n<li>\n<p>文件I/O中用文件描述符表现一个打开的文件，可以访问不同类型的文件如普通文件、设备文件和管道文件等。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>标准I/O被称为高级磁盘I/O，遵循ANSI C相关标准。只要开发环境中有标准I/O库，标准I/O就可以使用。</p>\n<ul>\n<li>\n<p>标准I/O可以看成是在文件I/O的基础上封装了缓冲机制。先读写缓冲区，必要时再访问实际文件，从而减少了系统调用的次数。</p>\n</li>\n<li>\n<p>标准I/O中用FILE（流）表示一个打开的文件，通常只用来访问普通文件。</p>\n</li>\n</ul>\n</li>\n</ol>\n","prev":{"title":"「编译原理」数据流分析算法","link":"2022/10/17/compiler-dataflowAnalysis"},"next":{"title":"「nginx」学习笔记","link":"2022/09/30/「nginx」学习笔记"},"plink":"http://blog.horik.cn/2022/10/04/「系统编程」文件操作/","toc":[{"id":"文件的类型","title":"文件的类型","index":"1"},{"id":"文件的权限","title":"文件的权限","index":"2"},{"id":"文件读写操作syscall","title":"文件读写操作Syscall","index":"3"},{"id":"文件描述符的属性控制","title":"文件描述符的属性控制","index":"4"},{"id":"文件\\目录相关syscall","title":"文件\\目录相关Syscall","index":"5"},{"id":"链接","title":"链接","index":"6"},{"id":"文件io和标准io的区别","title":"文件IO和标准IO的区别","index":"7"}],"reward":true,"copyright":{"author":"Horik","link":"<a href=\"http://blog.horik.cn/2022/10/04/「系统编程」文件操作/\" title=\"「系统编程」文件操作\">http://blog.horik.cn/2022/10/04/「系统编程」文件操作/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"October 4, 2022","updated":"October 5, 2022"},"reading_time":"2189 words in 15 min"}